## Мое первое README для курсса по GIT

*Умение работать с **Git*** - важный навыr для разработчика.

**GitHub** дает возможность совместной разработки кода.

Ссылка на случайный сайт: [custom-shop](https://custom-shop.ru/ "Перейти в custom-shop.ru") 


**Git Bash** - консольный инструмент для Windows. [Скачать.](https://git-scm.com/download/win)

**pwd** от англ. print working directory — «показать рабочую папку».

**cd** от англ. change directory — «сменить директорию».

**~** обозначение домашней директории.

**ls** от англ. list directory contents — "отобразить содержимое". **ls -a** отобразить вместе со скрытыми файлами.

Чтобы вернуться в родительскую директорию — то есть на уровень выше, — вместо названия папки нужно написать две точки: **".."**.

**touch** (англ. «коснуться») с именем файла в качестве параметра: touch %ИМЯ_ФАЙЛА%.

Для создания директорий через терминал используют другую команду — **mkdir** (от англ. make directory — «создать директорию»). 
Можно создать целую структуру директорий одной командой с помощью флага **-p**. **$ mkdir -p dir1/dir-inside/dir-deeper-inside**
- создали папку dir-deeper-inside в папке dir-inside, которая находится в папке dir1.

**mv** от англ. move — «переместить» для перемещения файлов между дирикториями.

**cp** (от англ. copy — «копировать»). В простом виде cp принимает два параметра: что копируем и куда копируем.
$ cp что_копируем куда_копируем. ($ cp index.html style.css script.js src/
- скопировали три файла (index.html, style.css и script.js) в папку src)

**cat** (от англ. concatenate and print — «объединить и распечатать») вместе с именем файла. Команда распечатает то, что содержится в нём.
$ cat myfile.txt - распечатали содержимое файла myfile.txt.

**Удаление файлов и папок — rm, rmdir, rm -r** - rm (от англ. remove — «удалить») и передать ей имя файла.
$ rm example.txt - удалили файл example.txt из текущей папки. rmdir (от англ. remove directory — «удалить директорию»). Не забудьте указать имя папки.
$ rmdir images - команда удалит папку images из текущей директории, если папка images пуста. 

**git init** (от англ. initialize — «инициализировать»). Чтобы Git начал отслеживать изменения в проекте, папку с файлами этого проекта нужно сделать Git-репозиторием.

**«Разгитить»** папку, если что-то пошло не так, **— rm -rf .git**
Если вы случайно сделали Git-репозиторием не ту папку, её можно «разгитить». Для этого нужно удалить скрытую подпапку .git.
$ cd <папка с репозиторием> # перешли в папку. $ rm -rf .git - удалили подпапку .git 

**git status** (от англ. status — «статус», «состояние») — она показывает текущее состояние репозитория.

**git add --all** (от англ. add — «добавить» + от англ. all — «всё»). Ключ, или флаг, --all позволяет подготовить к сохранению все файлы в репозитории.

Сделать коммит можно командой **git commit** c ключом **-m** (от англ. message — «сообщение»), который присваивает коммиту сообщение. **$ git commit -m ‘Мой первый коммит!’** 

**git log** (от англ. log — «журнал [записей]») - посмотреть историю коммитов.

**git push** (от англ. push — «толкать») - Отправить изменения на удалённый репозиторий ($ git push -u origin main # Если команда приведёт к ошибке, попробуйте 
                          / заменить main на master.)